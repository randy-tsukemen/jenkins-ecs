AWSTemplateFormatVersion: "2010-09-09"
Description: "Jenkins Agent Cluster on ECS for 1000 concurrent jobs"

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC where Jenkins will be deployed

  PrivateSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Private subnets for Jenkins agents

  JenkinsControllerSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security group ID for Jenkins controller

  JenkinsAgentSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security group ID for Jenkins agents

  MinAgentCapacity:
    Type: Number
    Default: 10
    Description: Minimum number of agent instances

  MaxAgentCapacity:
    Type: Number
    Default: 1000
    Description: Maximum number of agent instances

  ScaleInCooldown:
    Type: Number
    Default: 300
    Description: Scale in cooldown period in seconds

  ScaleOutCooldown:
    Type: Number
    Default: 60
    Description: Scale out cooldown period in seconds

Resources:
  # ECS Cluster for Agents
  JenkinsAgentECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: jenkins-agent-cluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Weight: 3
          Base: 0
        - CapacityProvider: FARGATE
          Weight: 1
          Base: 1

  # CloudWatch Logs
  JenkinsAgentLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/jenkins-agent
      RetentionInDays: 7

  # IAM Roles
  JenkinsAgentTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: JenkinsAgentBuildAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: "*"

  JenkinsAgentExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # Agent Task Definitions
  # Small Agent (2 vCPU, 4GB)
  JenkinsSmallAgentTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: jenkins-agent-small
      Cpu: "2048" # 2 vCPU
      Memory: "4096" # 4GB
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt JenkinsAgentExecutionRole.Arn
      TaskRoleArn: !GetAtt JenkinsAgentTaskRole.Arn
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: jenkins-agent
          Image: jenkins/inbound-agent:latest
          Essential: true
          Environment:
            - Name: JENKINS_URL
              Value: !Sub http://${JenkinsControllerSecurityGroupId}.internal:8080
            - Name: JENKINS_SECRET
              Value: "{{resolve:secretsmanager:JenkinsAgentSecret:SecretString:JNLSecretKey}}"
            - Name: JENKINS_AGENT_NAME
              Value: !Sub ecs-agent-small-#{AWS::Region}-#{AWS::AccountId}-#{AWS::StackName}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref JenkinsAgentLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: jenkins-agent-small

  # Medium Agent (4 vCPU, 8GB)
  JenkinsMediumAgentTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: jenkins-agent-medium
      Cpu: "4096" # 4 vCPU
      Memory: "8192" # 8GB
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt JenkinsAgentExecutionRole.Arn
      TaskRoleArn: !GetAtt JenkinsAgentTaskRole.Arn
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: jenkins-agent
          Image: jenkins/inbound-agent:latest
          Essential: true
          Environment:
            - Name: JENKINS_URL
              Value: !Sub http://${JenkinsControllerSecurityGroupId}.internal:8080
            - Name: JENKINS_SECRET
              Value: "{{resolve:secretsmanager:JenkinsAgentSecret:SecretString:JNLSecretKey}}"
            - Name: JENKINS_AGENT_NAME
              Value: !Sub ecs-agent-medium-#{AWS::Region}-#{AWS::AccountId}-#{AWS::StackName}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref JenkinsAgentLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: jenkins-agent-medium

  # Large Agent (8 vCPU, 16GB)
  JenkinsLargeAgentTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: jenkins-agent-large
      Cpu: "8192" # 8 vCPU
      Memory: "16384" # 16GB
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt JenkinsAgentExecutionRole.Arn
      TaskRoleArn: !GetAtt JenkinsAgentTaskRole.Arn
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: jenkins-agent
          Image: jenkins/inbound-agent:latest
          Essential: true
          Environment:
            - Name: JENKINS_URL
              Value: !Sub http://${JenkinsControllerSecurityGroupId}.internal:8080
            - Name: JENKINS_SECRET
              Value: "{{resolve:secretsmanager:JenkinsAgentSecret:SecretString:JNLSecretKey}}"
            - Name: JENKINS_AGENT_NAME
              Value: !Sub ecs-agent-large-#{AWS::Region}-#{AWS::AccountId}-#{AWS::StackName}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref JenkinsAgentLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: jenkins-agent-large

  # Auto Scaling Resources
  JenkinsAgentServiceSmall:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: jenkins-agent-small
      Cluster: !Ref JenkinsAgentECSCluster
      TaskDefinition: !Ref JenkinsSmallAgentTaskDefinition
      DesiredCount: 0 # Start with 0, will be scaled by Auto Scaling
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref PrivateSubnets
          SecurityGroups:
            - !Ref JenkinsAgentSecurityGroupId
          AssignPublicIp: DISABLED
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Weight: 3
        - CapacityProvider: FARGATE
          Weight: 1

  JenkinsAgentServiceMedium:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: jenkins-agent-medium
      Cluster: !Ref JenkinsAgentECSCluster
      TaskDefinition: !Ref JenkinsMediumAgentTaskDefinition
      DesiredCount: 0 # Start with 0, will be scaled by Auto Scaling
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref PrivateSubnets
          SecurityGroups:
            - !Ref JenkinsAgentSecurityGroupId
          AssignPublicIp: DISABLED
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Weight: 3
        - CapacityProvider: FARGATE
          Weight: 1

  JenkinsAgentServiceLarge:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: jenkins-agent-large
      Cluster: !Ref JenkinsAgentECSCluster
      TaskDefinition: !Ref JenkinsLargeAgentTaskDefinition
      DesiredCount: 0 # Start with 0, will be scaled by Auto Scaling
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref PrivateSubnets
          SecurityGroups:
            - !Ref JenkinsAgentSecurityGroupId
          AssignPublicIp: DISABLED
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Weight: 3
        - CapacityProvider: FARGATE
          Weight: 1

  # Auto Scaling Configuration
  JenkinsAgentSmallScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinAgentCapacity
      MaxCapacity:
        Fn::Select:
          - 0
          - Fn::Split:
              - "."
              - Fn::FDiv:
                  - !Ref MaxAgentCapacity
                  - 2
      ResourceId: !Sub service/${JenkinsAgentECSCluster}/${JenkinsAgentServiceSmall.Name}
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt JenkinsAgentAutoScalingRole.Arn

  JenkinsAgentMediumScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 0
      MaxCapacity:
        Fn::Select:
          - 0
          - Fn::Split:
              - "."
              - Fn::FDiv:
                  - !Ref MaxAgentCapacity
                  - 3
      ResourceId: !Sub service/${JenkinsAgentECSCluster}/${JenkinsAgentServiceMedium.Name}
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt JenkinsAgentAutoScalingRole.Arn

  JenkinsAgentLargeScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 0
      MaxCapacity:
        Fn::Select:
          - 0
          - Fn::Split:
              - "."
              - Fn::FDiv:
                  - !Ref MaxAgentCapacity
                  - 6
      ResourceId: !Sub service/${JenkinsAgentECSCluster}/${JenkinsAgentServiceLarge.Name}
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt JenkinsAgentAutoScalingRole.Arn

  JenkinsAgentAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole

  # Custom CloudWatch Metrics for Jenkins
  JenkinsCustomMetricsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: JenkinsMetricsPublishPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"

  # Scheduled scaling for off-hours
  JenkinsAgentScaleDownScheduledAction:
    Type: AWS::ApplicationAutoScaling::ScheduledAction
    Properties:
      ScheduledActionName: ScaleDownAfterHours
      Schedule: cron(0 19 ? * MON-FRI *) # 7PM on weekdays
      ScalableTargetAction:
        MinCapacity: 0
        MaxCapacity: 10 # Keep minimal capacity during off-hours
      ResourceId: !Sub service/${JenkinsAgentECSCluster}/${JenkinsAgentServiceSmall.Name}
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  JenkinsAgentScaleUpScheduledAction:
    Type: AWS::ApplicationAutoScaling::ScheduledAction
    Properties:
      ScheduledActionName: ScaleUpWorkHours
      Schedule: cron(0 7 ? * MON-FRI *) # 7AM on weekdays
      ScalableTargetAction:
        MinCapacity: !Ref MinAgentCapacity
        MaxCapacity:
          Fn::Select:
            - 0
            - Fn::Split:
                - "."
                - Fn::FDiv:
                    - !Ref MaxAgentCapacity
                    - 2
      ResourceId: !Sub service/${JenkinsAgentECSCluster}/${JenkinsAgentServiceSmall.Name}
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  # CloudWatch Alarms for Auto Scaling
  JenkinsHighCPUAlarmSmall:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: High CPU utilization for Jenkins small agents
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: 60
      EvaluationPeriods: 3
      Threshold: 70
      AlarmActions:
        - !Ref JenkinsAgentScalingPolicy
      Dimensions:
        - Name: ClusterName
          Value: !Ref JenkinsAgentECSCluster
        - Name: ServiceName
          Value: !GetAtt JenkinsAgentServiceSmall.Name
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching

  JenkinsAgentScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: JenkinsAgentScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      ResourceId: !Sub service/${JenkinsAgentECSCluster}/${JenkinsAgentServiceSmall.Name}
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 60.0
        ScaleInCooldown: !Ref ScaleInCooldown
        ScaleOutCooldown: !Ref ScaleOutCooldown

Outputs:
  JenkinsAgentClusterId:
    Description: ECS Cluster ID for Jenkins agents
    Value: !Ref JenkinsAgentECSCluster

  JenkinsSmallAgentTaskDefinitionArn:
    Description: Task Definition ARN for small Jenkins agents
    Value: !Ref JenkinsSmallAgentTaskDefinition

  JenkinsMediumAgentTaskDefinitionArn:
    Description: Task Definition ARN for medium Jenkins agents
    Value: !Ref JenkinsMediumAgentTaskDefinition

  JenkinsLargeAgentTaskDefinitionArn:
    Description: Task Definition ARN for large Jenkins agents
    Value: !Ref JenkinsLargeAgentTaskDefinition
